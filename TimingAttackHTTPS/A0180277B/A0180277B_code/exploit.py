import time
import os
import sys
import numpy

def readData(directory):
	ret = []
	file = open(directory)
	lines = file.read()
	lines = lines.split('\n')
	file.close()
	
	temp = []
	for s in lines:
		temp.append(s.split(" "))
	for s in temp:
		if (s != [""]):
			point = []
			x = float(s[0].split(":")[-1])
			y = int(s[1])
			z = s[2]
			if (y != 0):
				ret.append([x,y,z])
	return ret

def mapFx(triplet):
	ret = 0
	if (1000 < triplet[1]):
		ret = 4
	elif(400 < triplet[1]):
		ret = 3
	elif(200 < triplet[1]):
		ret = 2
	else:
		ret = 1
	if (triplet[2] == "out"):
		ret += 4
	return ret
def concatList(listOfInt):
	ret = ""
	for i in listOfInt:
		ret += str(i)
	return ret.replace("444444444", "5").replace("5555", "6")
def compressData(dataIn):
	ret = list(map(lambda x: mapFx(x), dataIn))
	return concatList(ret)

def levenshteinDistanceDP(token1, token2):
    distances = numpy.zeros((len(token1) + 1, len(token2) + 1))

    for t1 in range(len(token1) + 1):
        distances[t1][0] = t1

    for t2 in range(len(token2) + 1):
        distances[0][t2] = t2
        
    a = 0
    b = 0
    c = 0
    
    for t1 in range(1, len(token1) + 1):
        for t2 in range(1, len(token2) + 1):
            if (token1[t1-1] == token2[t2-1]):
                distances[t1][t2] = distances[t1 - 1][t2 - 1]
            else:
                a = distances[t1][t2 - 1]
                b = distances[t1 - 1][t2]
                c = distances[t1 - 1][t2 - 1]
                
                if (a <= b and a <= c):
                    distances[t1][t2] = a + 1
                elif (b <= a and b <= c):
                    distances[t1][t2] = b + 1
                else:
                    distances[t1][t2] = c + 1
    normalization = max(len(token1), len(token2))
    return distances[len(token1)][len(token2)]/normalization

def levenDistArr(toMatch, prof):
	ret = []
	for i in range(len(prof)):
		minDist = 1
		for j in range(len(prof[i])):
			currDist = levenshteinDistanceDP(toMatch, prof[i][j])
			minDist = min(currDist, minDist)
		ret.append([i, minDist])
	ret.sort(key = lambda x: x[1])
	print(ret)
	return ret

def resultFilter(levenData):
	ret = {}
	temp = []
	for i in range(len(levenData)):
		temp.append([i, levenData[i]])
	levenData = temp
	for i in range(len(levenData)):
		t = min(levenData, key = lambda x: x[1][0])
		ret[t[0]] = t[1][0][0]
		levenData.remove(min(levenData, key = lambda x: x[1][0]))
		for i in range(len(levenData)):
			levenData[i][1] = list(filter(lambda x: x[0] != t[1][0][0], levenData[i][1]))
	return ret

obs1 = sys.argv[1]
obs2 = sys.argv[2]

#profiles[profileNumber][list of subprofiles]
profiles = []
for i in range(1, 36):
	profile = []
	for j in range(1, 8):
		subProfile = readData("A0180277B_code/profile" + str(j) + "/" + str(i))
		subProfile = compressData(subProfile)
		profile.append(subProfile)
	profiles.append(profile)

data1 = []
data2 = []
for i in range(1, 36):
	data1.append(compressData(readData(obs1 + "/anon-" + str(i))))
	data2.append(compressData(readData(obs2 + "/anon-" + str(i))))

start_time = time.time()
data1 = list(map(lambda x: levenDistArr(x, profiles), data1))
data1 = resultFilter(data1)
data2 = list(map(lambda x: levenDistArr(x, profiles), data2))
data2 = resultFilter(data2)
print("--- %s seconds --- " % (time.time() - start_time))

toWrite = ""
for i in range(35):
	toWrite += str(int(data1[i]) + 1) + " " + str(int(data2[i]) + 1) + "\n"
text_file = open("solution.txt", "w")
n = text_file.write(toWrite[:-1])
text_file.close()



